package org.wxc.opensources;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.wxc.opensources.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Login = new Property(1, String.class, "login", false, "LOGIN");
        public final static Property UserId = new Property(2, int.class, "userId", false, "USER_ID");
        public final static Property AvatarUrl = new Property(3, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property HtmlUrl = new Property(5, String.class, "htmlUrl", false, "HTML_URL");
        public final static Property FollowersUrl = new Property(6, String.class, "followersUrl", false, "FOLLOWERS_URL");
        public final static Property FollowingUrl = new Property(7, String.class, "followingUrl", false, "FOLLOWING_URL");
        public final static Property GistsUrl = new Property(8, String.class, "gistsUrl", false, "GISTS_URL");
        public final static Property StarredUrl = new Property(9, String.class, "starredUrl", false, "STARRED_URL");
        public final static Property SubscriptionsUrl = new Property(10, String.class, "subscriptionsUrl", false, "SUBSCRIPTIONS_URL");
        public final static Property OrganizationsUrl = new Property(11, String.class, "organizationsUrl", false, "ORGANIZATIONS_URL");
        public final static Property ReposUrl = new Property(12, String.class, "reposUrl", false, "REPOS_URL");
        public final static Property EventsUrl = new Property(13, String.class, "eventsUrl", false, "EVENTS_URL");
        public final static Property ReceivedEventsUrl = new Property(14, String.class, "receivedEventsUrl", false, "RECEIVED_EVENTS_URL");
        public final static Property Type = new Property(15, String.class, "type", false, "TYPE");
        public final static Property Site_admin = new Property(16, boolean.class, "site_admin", false, "SITE_ADMIN");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOGIN' TEXT NOT NULL ," + // 1: login
                "'USER_ID' INTEGER NOT NULL UNIQUE ," + // 2: userId
                "'AVATAR_URL' TEXT NOT NULL ," + // 3: avatarUrl
                "'URL' TEXT NOT NULL ," + // 4: url
                "'HTML_URL' TEXT NOT NULL ," + // 5: htmlUrl
                "'FOLLOWERS_URL' TEXT NOT NULL ," + // 6: followersUrl
                "'FOLLOWING_URL' TEXT NOT NULL ," + // 7: followingUrl
                "'GISTS_URL' TEXT NOT NULL ," + // 8: gistsUrl
                "'STARRED_URL' TEXT NOT NULL ," + // 9: starredUrl
                "'SUBSCRIPTIONS_URL' TEXT NOT NULL ," + // 10: subscriptionsUrl
                "'ORGANIZATIONS_URL' TEXT NOT NULL ," + // 11: organizationsUrl
                "'REPOS_URL' TEXT NOT NULL ," + // 12: reposUrl
                "'EVENTS_URL' TEXT NOT NULL ," + // 13: eventsUrl
                "'RECEIVED_EVENTS_URL' TEXT NOT NULL ," + // 14: receivedEventsUrl
                "'TYPE' TEXT NOT NULL ," + // 15: type
                "'SITE_ADMIN' INTEGER NOT NULL );"); // 16: site_admin
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLogin());
        stmt.bindLong(3, entity.getUserId());
        stmt.bindString(4, entity.getAvatarUrl());
        stmt.bindString(5, entity.getUrl());
        stmt.bindString(6, entity.getHtmlUrl());
        stmt.bindString(7, entity.getFollowersUrl());
        stmt.bindString(8, entity.getFollowingUrl());
        stmt.bindString(9, entity.getGistsUrl());
        stmt.bindString(10, entity.getStarredUrl());
        stmt.bindString(11, entity.getSubscriptionsUrl());
        stmt.bindString(12, entity.getOrganizationsUrl());
        stmt.bindString(13, entity.getReposUrl());
        stmt.bindString(14, entity.getEventsUrl());
        stmt.bindString(15, entity.getReceivedEventsUrl());
        stmt.bindString(16, entity.getType());
        stmt.bindLong(17, entity.getSite_admin() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // login
            cursor.getInt(offset + 2), // userId
            cursor.getString(offset + 3), // avatarUrl
            cursor.getString(offset + 4), // url
            cursor.getString(offset + 5), // htmlUrl
            cursor.getString(offset + 6), // followersUrl
            cursor.getString(offset + 7), // followingUrl
            cursor.getString(offset + 8), // gistsUrl
            cursor.getString(offset + 9), // starredUrl
            cursor.getString(offset + 10), // subscriptionsUrl
            cursor.getString(offset + 11), // organizationsUrl
            cursor.getString(offset + 12), // reposUrl
            cursor.getString(offset + 13), // eventsUrl
            cursor.getString(offset + 14), // receivedEventsUrl
            cursor.getString(offset + 15), // type
            cursor.getShort(offset + 16) != 0 // site_admin
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogin(cursor.getString(offset + 1));
        entity.setUserId(cursor.getInt(offset + 2));
        entity.setAvatarUrl(cursor.getString(offset + 3));
        entity.setUrl(cursor.getString(offset + 4));
        entity.setHtmlUrl(cursor.getString(offset + 5));
        entity.setFollowersUrl(cursor.getString(offset + 6));
        entity.setFollowingUrl(cursor.getString(offset + 7));
        entity.setGistsUrl(cursor.getString(offset + 8));
        entity.setStarredUrl(cursor.getString(offset + 9));
        entity.setSubscriptionsUrl(cursor.getString(offset + 10));
        entity.setOrganizationsUrl(cursor.getString(offset + 11));
        entity.setReposUrl(cursor.getString(offset + 12));
        entity.setEventsUrl(cursor.getString(offset + 13));
        entity.setReceivedEventsUrl(cursor.getString(offset + 14));
        entity.setType(cursor.getString(offset + 15));
        entity.setSite_admin(cursor.getShort(offset + 16) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
